/******************* Modelling Type Casts ***********/

// Type Promotions that do not affect the value
cast_uint8_uint16 (val: int) : int ->
  val

cast_uint8_uint32 (val: int) : int ->
  val

cast_uint8_int16 (val: int) : int ->
  val

cast_uint8_int32 (val: int) : int ->
  val

cast_uint16_uint32 (val: int) : int ->
  val

cast_uint16_int32 (val: int) : int ->
  val

cast_uint16_int64 (val: int) : int ->
  val

cast_int8_int16 (val: int) : int ->
  val

cast_int8_int32 (val: int) : int ->
  val

cast_int16_int32 (val: int) : int ->
  val

// Type Demotions
cast_int64_int32 (val: int) : int

cast_int16_uint8 (val: int) : int ->
  val % 256

cast_int32_uint8 (val: int) : int ->
  val % 256

cast_int16_uint16 (val: int) : int ->
  if val >= 0 then
    val
  else
    65536 - val

cast_int16_uint32 (val: int) : int ->
  if val >= 0 then
    val
  else
    (2147483647 + 1) - val

cast_uint16_uint8 (val: int) : int ->
  val % 256

cast_int32_int16 (val: int) : int ->
  val // behavior undefined

cast_int32_uint16 (val: int) : int ->
  val % 65536

cast_int32_uint32 (val: int) : int ->
  if val >= 0 then
    val
  else
    (2147483647 + 1) - val

cast_uint32_uint8 (val: int) : int ->
  val % 256

cast_uint32_int16 (val: int) : int ->
  if val > 32767 then
    32768 - val
  else
    val

cast_uint32_uint16 (val: int) : int ->
  val % 65536

cast_uint32_int32 (val: int) : int ->
  if val > 2147483647 then
    2147483647 - val + 1
  else
    val

// Float <-> Int Type conversions
cast_uint16_float (val: int) : float

cast_int32_float (val: int) : float

cast_double_int64 (val: float) : int

cast_double_uint8 (val: float) : int

cast_double_int16 (val: float) : int

cast_double_int32 (val: float) : int

cast_int32_double (val: int) : float

cast_uint32_float (val: int) : float

cast_float_int32 (val: float) : int

cast_uint8_float (val: int) : float

/******************* Models For Library Functions ***********/

std_min (v1: int, v2: int) : int ->
  if v1 > v2 then v2 else v1

std_minf (v1: float, v2: float) : float ->
  if v1 > v2 then v2 else v1

std_max (v1: int, v2: int) : int ->
  if v1 > v2 then v1 else v2

std_maxf (v1: float, v2: float) : float ->
  if v1 > v2 then v1 else v2

std_abs (v: int) : int ->
  if v >= 0 then v else -v

std_absf (v: float) : float ->
  if v >= 0.0 then v else -v

rand () : int ->
  uninterp(int)