generator int do_op_int (int c, int v1, int v2)
{
  if (c == 0)       return lshr(v1, v2);
  else if (c == 1)  return shl(v1, v2);
  else if (c == 2)  return v1 + v2;
  else if (c == 3)  return v1 - v2;
  else if (c == 4)  return v1 * v2;
  else              return v2 / v1;
}

generator int do_op_float (int c, int v1, int v2)
{
  if (c == 0)       return v1 + v2;
  else if (c == 1)  return v1 - v2;
  else if (c == 2)  return v1 * v2;
  else              return v1 / v2;
}

generator bit do_bop (int c, int v1, int v2)
{
  if (c == 0)       return v1 == 1;
  else if (c == 1)  return v1 > v2;
  else if (c == 2)  return v1 == v2;
  else              return v1 != v2;
}

int PLUS = 3;
int TIMES = 5;

int[8] idxL = {??(5), ??(5), ??(5), ??(5), ??(5), ??(5), ??(5), ??(5)};
int[8] idxR = {??(5), ??(5), ??(5), ??(5), ??(5), ??(5), ??(5), ??(5)};
int[8] idxCL = {??(5), ??(5), ??(5), ??(5), ??(5), ??(5), ??(5), ??(5)};
int[8] idxCR = {??(5), ??(5), ??(5), ??(5), ??(5), ??(5), ??(5), ??(5)};
int[8] op = {??(3), ??(3), ??(3), ??(3), ??(3), ??(3), ??(3), ??(3)};
int[8] bop = {??(2), ??(2), ??(2), ??(2), ??(2), ??(2), ??(2), ??(2)};
bit[8] opc = {??(1), ??(1), ??(1), ??(1), ??(1), ??(1), ??(1), ??(1)};
int expr_sz = ??(3);
int expr_idx = ??(5);

generator int int_expr_grm (int N, int[N] terminals)
{
  int[32] operands;
  int[32] order;

  int i=0;

  repeat (N) {
    operands[i] = terminals[i];
    order[i] = i;
    i++;
  }

  repeat(step : expr_sz) {
    assert (idxL[step] < i);
    assert (idxR[step] < i);
    assert (idxCL[step] < i);
    assert (idxCR[step] < i);

    if (op[step] == PLUS || op[step] == TIMES)
      assert (order[idxL[step]] <= order[idxR[step]]);

    if (bop[step] > 0)
      assert (order[idxCL[step]] <= order[idxCR[step]]);

    if (opc[step])
      operands[i] = do_op_int(op[step], operands[idxL[step]], operands[idxR[step]]);
    else
      operands[i] = (do_bop(bop[step], operands[idxCL[step]], operands[idxCR[step]]) ? operands[idxL[step]] : operands[idxR[step]]);

    order[i] = order[idxL[step]];

    i++;
  }

  minimize(expr_sz);

  return operands[expr_idx];
}

generator int float_expr_grm(int N, int[N] terminals)
{
  int[32] operands;
  int[32] order;

  int i=0;

  repeat (N) {
    operands[i] = terminals[i];
    order[i] = i;
    i++;
  }

  repeat(step : expr_sz) {
    assert (idxL[step] < i);
    assert (idxR[step] < i);
    assert (idxCL[step] < i);
    assert (idxCR[step] < i);

    if (op[step] == PLUS || op[step] == TIMES)
      assert (order[idxL[step]] <= order[idxR[step]]);

    if (bop[step] > 0)
      assert (order[idxCL[step]] <= order[idxCR[step]]);

    if (opc[step])
      operands[i] = do_op_float(op[step], operands[idxL[step]], operands[idxR[step]]);
    else
      operands[i] = (do_bop(bop[step], operands[idxCL[step]], operands[idxCR[step]]) ? operands[idxL[step]] : operands[idxR[step]]);

    order[i] = order[idxL[step]];

    i++;
  }

  minimize(expr_sz);

  return operands[expr_idx];
}