include "src/dexter/synthesis/grammar.skh";

int ARRAY_LEN = 70;
int OFFSET = 30;

struct HBuffer{
  int[ARRAY_LEN] data;
  int width;
  int height;
}

bit HBuffer_equals(HBuffer o1, HBuffer o2) {
  if (o1.data != o2.data) return false;
  if (o1.width != o2.width) return false;
  if (o1.height != o2.height) return false;
  return true;
}

generator int inv1_buf_asn_2d_int_terms_gen(int x, int y, HBuffer temp, HBuffer output_init, int ch1, int ch0){
  int rad_gen_0_0 = rad_gen(x, choose10_1, choose8_1, choose9_1);
  int rad_gen_1_0 = rad_gen(y, choose10_2, choose8_2, choose9_2);
  return (ch0 == 0 ? HBuffer_Get((ch1 == 0 ? temp : output_init), rad_gen_0_0, rad_gen_1_0) : HBuffer_Get((ch1 == 0 ? temp : output_init), rad_gen_0_0, rad_gen_1_0));
}

generator int inv1_buf_asn_1d_int_terms_gen(int x, int y, HBuffer temp, HBuffer output_init, int ch2, int ch3){
  int rad_gen_0_0 = rad_gen(x, choose10_4, choose8_4, choose9_4);
  int rad_gen_1_0 = rad_gen(y, choose10_5, choose8_5, choose9_5);
  return (ch2 == 0 ? HBuffer_Get((ch3 == 0 ? temp : output_init), rad_gen_0_0, rad_gen_1_0) : HBuffer_Get((ch3 == 0 ? temp : output_init), rad_gen_0_0, rad_gen_1_0));
}

generator int inv0_buf_asn_2d_int_terms_gen(int x, int y, HBuffer temp, HBuffer output_init, int ch5, int ch4){
  int rad_gen_0_0 = rad_gen(x, choose10_7, choose8_7, choose9_7);
  int rad_gen_1_0 = rad_gen(y, choose10_8, choose8_8, choose9_8);
  return (ch4 == 0 ? HBuffer_Get((ch5 == 0 ? temp : output_init), rad_gen_0_0, rad_gen_1_0) : HBuffer_Get((ch5 == 0 ? temp : output_init), rad_gen_0_0, rad_gen_1_0));
}

generator int pc_buf_asn_2d_int_terms_gen(int x, int y, HBuffer temp, HBuffer output_init, int ch6, int ch7){
  int rad_gen_0_0 = rad_gen(x, choose10_10, choose8_10, choose9_10);
  int rad_gen_1_0 = rad_gen(y, choose10_11, choose8_11, choose9_11);
  return (ch6 == 0 ? HBuffer_Get((ch7 == 0 ? temp : output_init), rad_gen_0_0, rad_gen_1_0) : HBuffer_Get((ch7 == 0 ? temp : output_init), rad_gen_0_0, rad_gen_1_0));
}

generator int idx_2d_gen(int x, int y, int width){
  return index2D(rad_gen(x, choose10_13, choose8_13, choose9_13), rad_gen(y, choose10_14, choose8_14, choose9_14), width);
}

generator int rad_gen(int val, int ch10, int ch8, int ch9){
  return (ch8 == 0 ? val : ch8 == 1 ? val + (ch9 == 0 ? 1 : 1) : val - (ch10 == 0 ? 1 : 1));
}

int index2D(int x, int y, int width){
  return (y * width) + x;
}

HBuffer HBuffer_Set(HBuffer buf, int x, int y, int val){
  return new HBuffer(data=lift_fn0(buf, val, x, y), width=buf.width, height=buf.height);
}

int cast_uint8_uint16(int val){
  return val;
}

int cast_uint8_uint32(int val){
  return val;
}

int cast_uint8_int16(int val){
  return val;
}

int cast_uint8_int32(int val){
  return val;
}

int cast_uint16_uint32(int val){
  return val;
}

int cast_uint16_int32(int val){
  return val;
}

int cast_uint16_int64(int val){
  return val;
}

int cast_int8_int16(int val){
  return val;
}

int cast_int8_int32(int val){
  return val;
}

int cast_int16_int32(int val){
  return val;
}

int cast_int32_int16(int val){
  return val;
}

int std_min(int v1, int v2){
  return (v1 > v2) ? 
    v2 : 
    v1;
}

int std_minf(int v1, int v2){
  return (v1 > v2) ? 
    v2 : 
    v1;
}

int std_max(int v1, int v2){
  return (v1 > v2) ? 
    v1 : 
    v2;
}

int std_maxf(int v1, int v2){
  return (v1 > v2) ? 
    v1 : 
    v2;
}

int std_abs(int v){
  return (v >= 0) ? 
    v : 
    (-(v));
}

int std_absf(int v){
  return (v >= (0)) ? 
    v : 
    (-(v));
}

int cast_int64_int32(int val);

int cast_uint16_float(int val);

int cast_int32_float(int val);

int cast_double_int64(int val);

int cast_double_uint8(int val);

int cast_double_int16(int val);

int cast_double_int32(int val);

int cast_int32_double(int val);

int cast_uint32_float(int val);

int cast_float_int32(int val);

int cast_uint8_float(int val);

int HBuffer_Get(HBuffer buf, int x, int y){
  return buf.data[OFFSET + ((y * (buf.width)) + x)];
}

bit inv1_buf_asn_2d(int lb_y, int ub_y, int lb_x, int ub_x, HBuffer out, HBuffer out_init, HBuffer temp, HBuffer output_init){
  return lift_fn2(lb_x, lb_y, out, output_init, temp, ub_x, ub_y);
}

bit inv0_buf_asn_2d(int lb_y, int ub_y, int lb_x, int ub_x, HBuffer out, HBuffer out_init, HBuffer temp, HBuffer output_init){
  return lift_fn4(lb_x, lb_y, out, output_init, temp, ub_x, ub_y);
}

bit pc_buf_asn_2d(int lb_y, int ub_y, int lb_x, int ub_x, HBuffer out, HBuffer out_init, HBuffer temp, HBuffer output_init){
  return lift_fn6(lb_x, lb_y, out, output_init, temp, ub_x, ub_y);
}

bit idn_2d(int lb_y, int ub_y, int lb_x, int ub_x, HBuffer out, HBuffer out_init){
  return lift_fn8(lb_x, lb_y, out, out_init, ub_x, ub_y);
}

bit inv1_buf_asn_1d(int idx_y, int lb_x, int ub_x, HBuffer out, HBuffer out_init, HBuffer temp, HBuffer output_init){
  return lift_fn9(idx_y, lb_x, out, output_init, temp, ub_x);
}

bit idn_1d(int idx_y, int lb_x, int ub_x, HBuffer out, HBuffer out_init){
  return lift_fn10(idx_y, lb_x, out, out_init, ub_x);
}

int int_expr(int val){
  return val;
}

bit pc(HBuffer output, HBuffer temp, int y, int x, HBuffer output_init, int y_init, int x_init){
  return true && pc_buf_asn_2d(0, output.height, 0, output.width, output, output_init, temp, output_init);
}

bit inv0(HBuffer output, HBuffer temp, int y, int x, HBuffer output_init, int y_init, int x_init){
  return true && (inv0_buf_asn_2d(0, y, 0, output.width, output, output_init, temp, output_init) && idn_2d(y, output.height, 0, output.width, output, output_init));
}

bit inv1(HBuffer output, HBuffer temp, int y, int x, HBuffer output_init, int y_init, int x_init){
  return true && (((inv1_buf_asn_2d(0, y, 0, output.width, output, output_init, temp, output_init) && idn_2d(y + 1, output.height, 0, output.width, output, output_init)) && inv1_buf_asn_1d(y, 0, x, output, output_init, temp, output_init)) && idn_1d(y, x, output.width, output, output_init));
}

int[ARRAY_LEN] lift_fn0(HBuffer buf, int val, int x, int y){
  int[ARRAY_LEN] r = buf.data;
  r[OFFSET + index2D(x, y, buf.width)] = val;
  return r;
}

bit lift_fn1(int idx_y, int lb_x, HBuffer out, HBuffer output_init, HBuffer temp, int ub_x){
  bit ret_val = true;
  for (int idx_x=lb_x; idx_x<ub_x; ++idx_x) {
    ret_val = ret_val && (HBuffer_Get(out, idx_x, idx_y) == int_expr(inv1_buf_asn_2d_int_terms_gen(idx_x, idx_y, temp, output_init, choose1_19, choose0_19)));
  }
  return ret_val;
}

bit lift_fn2(int lb_x, int lb_y, HBuffer out, HBuffer output_init, HBuffer temp, int ub_x, int ub_y){
  bit ret_val = true;
  for (int idx_y=lb_y; idx_y<ub_y; ++idx_y) {
    ret_val = ret_val && (lift_fn1(idx_y, lb_x, out, output_init, temp, ub_x));
  }
  return ret_val;
}

bit lift_fn3(int idx_y, int lb_x, HBuffer out, HBuffer output_init, HBuffer temp, int ub_x){
  bit ret_val = true;
  for (int idx_x=lb_x; idx_x<ub_x; ++idx_x) {
    ret_val = ret_val && (HBuffer_Get(out, idx_x, idx_y) == int_expr(inv0_buf_asn_2d_int_terms_gen(idx_x, idx_y, temp, output_init, choose5_22, choose4_22)));
  }
  return ret_val;
}

bit lift_fn4(int lb_x, int lb_y, HBuffer out, HBuffer output_init, HBuffer temp, int ub_x, int ub_y){
  bit ret_val = true;
  for (int idx_y=lb_y; idx_y<ub_y; ++idx_y) {
    ret_val = ret_val && (lift_fn3(idx_y, lb_x, out, output_init, temp, ub_x));
  }
  return ret_val;
}

bit lift_fn5(int idx_y, int lb_x, HBuffer out, HBuffer output_init, HBuffer temp, int ub_x){
  bit ret_val = true;
  for (int idx_x=lb_x; idx_x<ub_x; ++idx_x) {
    ret_val = ret_val && (HBuffer_Get(out, idx_x, idx_y) == int_expr(pc_buf_asn_2d_int_terms_gen(idx_x, idx_y, temp, output_init, choose6_25, choose7_25)));
  }
  return ret_val;
}

bit lift_fn6(int lb_x, int lb_y, HBuffer out, HBuffer output_init, HBuffer temp, int ub_x, int ub_y){
  bit ret_val = true;
  for (int idx_y=lb_y; idx_y<ub_y; ++idx_y) {
    ret_val = ret_val && (lift_fn5(idx_y, lb_x, out, output_init, temp, ub_x));
  }
  return ret_val;
}

bit lift_fn7(int idx_y, int lb_x, HBuffer out, HBuffer out_init, int ub_x){
  bit ret_val = true;
  for (int idx_x=lb_x; idx_x<ub_x; ++idx_x) {
    ret_val = ret_val && (HBuffer_Get(out, idx_x, idx_y) == HBuffer_Get(out_init, idx_x, idx_y));
  }
  return ret_val;
}

bit lift_fn8(int lb_x, int lb_y, HBuffer out, HBuffer out_init, int ub_x, int ub_y){
  bit ret_val = true;
  for (int idx_y=lb_y; idx_y<ub_y; ++idx_y) {
    ret_val = ret_val && (lift_fn7(idx_y, lb_x, out, out_init, ub_x));
  }
  return ret_val;
}

bit lift_fn9(int idx_y, int lb_x, HBuffer out, HBuffer output_init, HBuffer temp, int ub_x){
  bit ret_val = true;
  for (int idx_x=lb_x; idx_x<ub_x; ++idx_x) {
    ret_val = ret_val && (HBuffer_Get(out, idx_x, idx_y) == int_expr(inv1_buf_asn_1d_int_terms_gen(idx_x, idx_y, temp, output_init, choose2_30, choose3_30)));
  }
  return ret_val;
}

bit lift_fn10(int idx_y, int lb_x, HBuffer out, HBuffer out_init, int ub_x){
  bit ret_val = true;
  for (int idx_x=lb_x; idx_x<ub_x; ++idx_x) {
    ret_val = ret_val && (HBuffer_Get(out, idx_x, idx_y) == HBuffer_Get(out_init, idx_x, idx_y));
  }
  return ret_val;
}

harness void sketch(int[ARRAY_LEN] output_data, int output_width, int output_height, int[ARRAY_LEN] output_init_data, int[ARRAY_LEN] temp_data, int temp_width, int temp_height, int x, int x_init, int y, int y_init) {
  HBuffer output = new HBuffer();
  int[ARRAY_LEN] _t0 = output_data;
  output.data = _t0;
  int _t1 = output_width;
  output.width = _t1;
  int _t2 = output_height;
  output.height = _t2;
  HBuffer output_init = new HBuffer();
  int[ARRAY_LEN] _t3 = output_init_data;
  output_init.data = _t3;
  int _t4 = output_width;
  output_init.width = _t4;
  int _t5 = output_height;
  output_init.height = _t5;
  HBuffer temp = new HBuffer();
  int[ARRAY_LEN] _t6 = temp_data;
  temp.data = _t6;
  int _t7 = temp_width;
  temp.width = _t7;
  int _t8 = temp_height;
  temp.height = _t8;
  assert ((((!(inv1(output, temp, y, x, output_init, y_init, x_init) && (x < (output.width)))) || inv1(HBuffer_Set(output, x, y, int_expr(HBuffer_Get(temp, x, y))), temp, y, x + 1, output_init, y_init, x_init)) && ((!(inv1(output, temp, y, x, output_init, y_init, x_init) && (!(x < (output.width))))) || inv0(output, temp, y + 1, x, output_init, y_init, x_init))) && (((!(inv0(output, temp, y, x, output_init, y_init, x_init) && (y < (output.height)))) || inv1(output, temp, y, 0, output_init, y_init, 0)) && ((!(inv0(output, temp, y, x, output_init, y_init, x_init) && (!(y < (output.height))))) || pc(output, temp, y, x, output_init, y_init, x_init)))) && inv0(output, temp, 0, x, output, 0, x);
}
int choose10_7 = ??(0);
int choose0_19 = ??(0);
int choose10_5 = ??(0);
int choose10_4 = ??(0);
int choose10_2 = ??(0);
int choose10_1 = ??(0);
int choose10_11 = ??(0);
int choose10_14 = ??(0);
int choose10_13 = ??(0);
int choose10_8 = ??(0);
int choose8_14 = ??(2);
int choose7_25 = ??(1);
int choose2_30 = ??(0);
int choose8_13 = ??(2);
int choose5_22 = ??(1);
int choose8_10 = ??(2);
int choose8_11 = ??(2);
int choose1_19 = ??(1);
int choose8_1 = ??(2);
int choose9_1 = ??(0);
int choose8_2 = ??(2);
int choose9_2 = ??(0);
int choose8_4 = ??(2);
int choose9_4 = ??(0);
int choose8_5 = ??(2);
int choose9_5 = ??(0);
int choose8_7 = ??(2);
int choose9_7 = ??(0);
int choose8_8 = ??(2);
int choose3_30 = ??(1);
int choose9_8 = ??(0);
int choose9_14 = ??(0);
int choose4_22 = ??(0);
int choose9_13 = ??(0);
int choose6_25 = ??(0);
int choose10_10 = ??(0);
int choose9_11 = ??(0);
int choose9_10 = ??(0);

int ashr (int v1, int v2);

int xor (int v1, int v2);

int band (int v1, int v2);

int bor (int v1, int v2);

int bnot (int v1);

int lshr (int v1, int v2) { 
  if (v2 == 0) return v1;
  if (v2 == 1) return v1 / 2;
  if (v2 == 2) return v1 / 4;
  if (v2 == 3) return v1 / 8;
  return -100;
}

int shl (int v1, int v2) { 
  if (v2 == 0) return v1;
  if (v2 == 1) return v1 * 2;
  if (v2 == 2) return v1 * 4;
  if (v2 == 3) return v1 * 8;
  return -100;
}