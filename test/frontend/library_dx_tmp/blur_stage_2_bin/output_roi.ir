class HBuffer(data:array(1,int), width:int, height:int)
index2D(x:int, y:int, width:int) : int -> ((y * width) + x)

HBuffer_Set(buf:HBuffer, x:int, y:int, val:int) : HBuffer -> HBuffer(store(buf.data, val, index2D(x, y, buf.width)), buf.width, buf.height)

HBuffer_Get(buf:HBuffer, x:int, y:int) : int -> select(buf.data, ((y * buf.width) + x))

cast_uint8_uint16(val:int) : int -> val

cast_uint8_uint32(val:int) : int -> val

cast_uint8_int16(val:int) : int -> val

cast_uint8_int32(val:int) : int -> val

cast_uint16_uint32(val:int) : int -> val

cast_uint16_int32(val:int) : int -> val

cast_uint16_int64(val:int) : int -> val

cast_int8_int16(val:int) : int -> val

cast_int8_int32(val:int) : int -> val

cast_int16_int32(val:int) : int -> val

cast_int32_int16(val:int) : int -> val

std_min(v1:int, v2:int) : int -> (if (v1 > v2) then v2 else v1)

std_minf(v1:float, v2:float) : float -> (if (v1 > v2) then v2 else v1)

std_max(v1:int, v2:int) : int -> (if (v1 > v2) then v1 else v2)

std_maxf(v1:float, v2:float) : float -> (if (v1 > v2) then v1 else v2)

std_abs(v:int) : int -> (if (v >= 0) then v else -(v))

std_absf(v:float) : float -> (if (v >= 0.0) then v else -(v))

cast_int64_int32(val:int) : int

cast_uint16_float(val:int) : float

cast_int32_float(val:int) : float

cast_double_int64(val:float) : int

cast_double_uint8(val:float) : int

cast_double_int16(val:float) : int

cast_double_int32(val:float) : int

cast_int32_double(val:int) : float

cast_uint32_float(val:int) : float

cast_float_int32(val:float) : int

cast_uint8_float(val:int) : float

inv_tmpl_1_gen(lb_y:int, ub_y:int, out:HBuffer, out_init:HBuffer) : bool -> (buf_asn_2d(lb_y, ub_y, 0, out.width, out, out_init) && choose(idn_2d(ub_y, out.height, 0, out.width, out, out_init), idn_2d(0, lb_y, 0, out.width, out, out_init)))

inv_tmpl_2_gen(lb_y:int, ub_y:int, curr_y:int, lb_x:int, ub_x:int, out:HBuffer, out_init:HBuffer) : bool -> (((buf_asn_2d(lb_y, ub_y, 0, out.width, out, out_init) && choose(idn_2d((ub_y + 1), out.height, 0, out.width, out, out_init), idn_2d(0, (lb_y - 1), 0, out.width, out, out_init))) && buf_asn_1d(curr_y, lb_x, ub_x, out, out_init)) && choose(idn_1d(curr_y, ub_x, out.width, out, out_init), idn_1d(curr_y, 0, lb_x, out, out_init)))

buf_asn_2d(lb_y:int, ub_y:int, lb_x:int, ub_x:int, out:HBuffer, out_init:HBuffer) : bool -> forall(idx_y, lb_y, ub_y, forall(idx_x, lb_x, ub_x, (HBuffer_Get(out, idx_x, idx_y) = int_expr(HBuffer_Get(out_init, idx_x, idx_y)))))

idn_2d(lb_y:int, ub_y:int, lb_x:int, ub_x:int, out:HBuffer, out_init:HBuffer) : bool -> forall(idx_y, lb_y, ub_y, forall(idx_x, lb_x, ub_x, (HBuffer_Get(out, idx_x, idx_y) = HBuffer_Get(out_init, idx_x, idx_y))))

buf_asn_1d(idx_y:int, lb_x:int, ub_x:int, out:HBuffer, out_init:HBuffer) : bool -> forall(idx_x, lb_x, ub_x, (HBuffer_Get(out, idx_x, idx_y) = int_expr(HBuffer_Get(out_init, idx_x, idx_y))))

idn_1d(idx_y:int, lb_x:int, ub_x:int, out:HBuffer, out_init:HBuffer) : bool -> forall(idx_x, lb_x, ub_x, (HBuffer_Get(out, idx_x, idx_y) = HBuffer_Get(out_init, idx_x, idx_y)))

int_expr(val:int) : int -> (if (val < uninterp(int)) then uninterp(int) else val)

inv1_bnd_gen(out:HBuffer, y_init:int, x_init:int, x:int, y:int) : int -> choose(0, out.width, out.height, y_init, x_init, x, y)

inv0_bnd_gen(out:HBuffer, y_init:int, x_init:int, x:int, y:int) : int -> choose(0, out.width, out.height, y_init, x_init, x, y)

pc(output:HBuffer, temp:HBuffer, y:int, x:int, output_init:HBuffer, y_init:int, x_init:int) : bool -> (true && buf_asn_2d(0, output.height, 0, output.width, output, output_init))

inv0(output:HBuffer, temp:HBuffer, y:int, x:int, output_init:HBuffer, y_init:int, x_init:int) : bool -> (true && choose(inv_tmpl_1_gen(inv0_bnd_gen(output, y_init, x_init, x, y), inv0_bnd_gen(output, y_init, x_init, x, y), output, output_init), inv_tmpl_2_gen(inv0_bnd_gen(output, y_init, x_init, x, y), inv0_bnd_gen(output, y_init, x_init, x, y), inv0_bnd_gen(output, y_init, x_init, x, y), inv0_bnd_gen(output, y_init, x_init, x, y), inv0_bnd_gen(output, y_init, x_init, x, y), output, output_init)))

inv1(output:HBuffer, temp:HBuffer, y:int, x:int, output_init:HBuffer, y_init:int, x_init:int) : bool -> (true && choose(inv_tmpl_1_gen(inv1_bnd_gen(output, y_init, x_init, x, y), inv1_bnd_gen(output, y_init, x_init, x, y), output, output_init), inv_tmpl_2_gen(inv1_bnd_gen(output, y_init, x_init, x, y), inv1_bnd_gen(output, y_init, x_init, x, y), inv1_bnd_gen(output, y_init, x_init, x, y), inv1_bnd_gen(output, y_init, x_init, x, y), inv1_bnd_gen(output, y_init, x_init, x, y), output, output_init)))

let(output:HBuffer, output_init:HBuffer, temp:HBuffer, x:int, x_init:int, y:int, y_init:int) in (((((inv1(output, temp, y, x, output_init, y_init, x_init) && (x < output.width)) --> inv1(HBuffer_Set(output, x, y, int_expr(HBuffer_Get(output, x, y))), temp, y, (x + 1), output_init, y_init, x_init)) && ((inv1(output, temp, y, x, output_init, y_init, x_init) && !((x < output.width))) --> inv0(output, temp, (y + 1), x, output_init, y_init, x_init))) && (((inv0(output, temp, y, x, output_init, y_init, x_init) && (y < output.height)) --> inv1(output, temp, y, 0, output_init, y_init, 0)) && ((inv0(output, temp, y, x, output_init, y_init, x_init) && !((y < output.height))) --> pc(output, temp, y, x, output_init, y_init, x_init)))) && inv0(output, temp, 0, x, output, 0, x))