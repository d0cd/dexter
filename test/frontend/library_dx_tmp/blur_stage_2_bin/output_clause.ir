class HBuffer(data:array(1,int), width:int, height:int)
index2D(x:int, y:int, width:int) : int -> ((y * width) + x)

HBuffer_Set(buf:HBuffer, x:int, y:int, val:int) : HBuffer -> HBuffer(store(buf.data, val, index2D(x, y, buf.width)), buf.width, buf.height)

cast_uint8_int32(val:int) : int -> val

cast_int32_uint8(val:int) : int -> (val % 256)

HBuffer_Get(buf:HBuffer, x:int, y:int) : int -> select(buf.data, ((y * buf.width) + x))

inv1_inv1_buf_asn_2d(lb_y:int, ub_y:int, lb_x:int, ub_x:int, out:HBuffer, out_init:HBuffer, temp:HBuffer, output_init:HBuffer) : bool -> forall(idx_y, lb_y, ub_y, forall(idx_x, lb_x, ub_x, (HBuffer_Get(out, idx_x, idx_y) = int_expr(HBuffer_Get(out_init, idx_x, idx_y), HBuffer_Get(temp, idx_x, (idx_y - 1)), HBuffer_Get(temp, idx_x, idx_y), HBuffer_Get(temp, idx_x, (idx_y + 1)), 3))))

inv0_inv0_buf_asn_2d(lb_y:int, ub_y:int, lb_x:int, ub_x:int, out:HBuffer, out_init:HBuffer, temp:HBuffer, output_init:HBuffer) : bool -> forall(idx_y, lb_y, ub_y, forall(idx_x, lb_x, ub_x, (HBuffer_Get(out, idx_x, idx_y) = int_expr(HBuffer_Get(out_init, idx_x, idx_y), HBuffer_Get(temp, idx_x, (idx_y - 1)), HBuffer_Get(temp, idx_x, idx_y), HBuffer_Get(temp, idx_x, (idx_y + 1)), 3))))

pc_pc_buf_asn_2d(lb_y:int, ub_y:int, lb_x:int, ub_x:int, out:HBuffer, out_init:HBuffer, temp:HBuffer, output_init:HBuffer) : bool -> forall(idx_y, lb_y, ub_y, forall(idx_x, lb_x, ub_x, (HBuffer_Get(out, idx_x, idx_y) = int_expr(HBuffer_Get(out_init, idx_x, idx_y), HBuffer_Get(temp, idx_x, (idx_y - 1)), HBuffer_Get(temp, idx_x, idx_y), HBuffer_Get(temp, idx_x, (idx_y + 1)), 3))))

idn_2d(lb_y:int, ub_y:int, lb_x:int, ub_x:int, out:HBuffer, out_init:HBuffer) : bool -> forall(idx_y, lb_y, ub_y, forall(idx_x, lb_x, ub_x, (HBuffer_Get(out, idx_x, idx_y) = HBuffer_Get(out_init, idx_x, idx_y))))

inv1_inv1_buf_asn_1d(idx_y:int, lb_x:int, ub_x:int, out:HBuffer, out_init:HBuffer, temp:HBuffer, output_init:HBuffer) : bool -> forall(idx_x, lb_x, ub_x, (HBuffer_Get(out, idx_x, idx_y) = int_expr(HBuffer_Get(out_init, idx_x, idx_y), HBuffer_Get(temp, idx_x, (idx_y - 1)), HBuffer_Get(temp, idx_x, idx_y), HBuffer_Get(temp, idx_x, (idx_y + 1)), 3)))

idn_1d(idx_y:int, lb_x:int, ub_x:int, out:HBuffer, out_init:HBuffer) : bool -> forall(idx_x, lb_x, ub_x, (HBuffer_Get(out, idx_x, idx_y) = HBuffer_Get(out_init, idx_x, idx_y)))

int_expr(v1:int, v2:int, v3:int, v4:int, v5:int) : int -> cast_int32_uint8((((cast_uint8_int32(v2) + cast_uint8_int32(v3)) + cast_uint8_int32(v4)) / v5))

pc(output:HBuffer, temp:HBuffer, y:int, x:int, output_init:HBuffer, y_init:int, x_init:int) : bool -> (true && pc_pc_buf_asn_2d(0, output.height, 0, output.width, output, output_init, temp, output_init))

inv0(output:HBuffer, temp:HBuffer, y:int, x:int, output_init:HBuffer, y_init:int, x_init:int) : bool -> (true && (inv0_inv0_buf_asn_2d(0, y, 0, output.width, output, output_init, temp, output_init) && idn_2d(y, output.height, 0, output.width, output, output_init)))

inv1(output:HBuffer, temp:HBuffer, y:int, x:int, output_init:HBuffer, y_init:int, x_init:int) : bool -> (true && (((inv1_inv1_buf_asn_2d(0, y, 0, output.width, output, output_init, temp, output_init) && idn_2d((y + 1), output.height, 0, output.width, output, output_init)) && inv1_inv1_buf_asn_1d(y, 0, x, output, output_init, temp, output_init)) && idn_1d(y, x, output.width, output, output_init)))

let(output:HBuffer, output_init:HBuffer, temp:HBuffer, x:int, x_init:int, y:int, y_init:int) in (((((inv1(output, temp, y, x, output_init, y_init, x_init) && (x < output.width)) --> inv1(HBuffer_Set(output, x, y, cast_int32_uint8((((cast_uint8_int32(HBuffer_Get(temp, x, (y - 1))) + cast_uint8_int32(HBuffer_Get(temp, x, y))) + cast_uint8_int32(HBuffer_Get(temp, x, (y + 1)))) / 3))), temp, y, (x + 1), output_init, y_init, x_init)) && ((inv1(output, temp, y, x, output_init, y_init, x_init) && !((x < output.width))) --> inv0(output, temp, (y + 1), x, output_init, y_init, x_init))) && (((inv0(output, temp, y, x, output_init, y_init, x_init) && (y < output.height)) --> inv1(output, temp, y, 0, output_init, y_init, 0)) && ((inv0(output, temp, y, x, output_init, y_init, x_init) && !((y < output.height))) --> pc(output, temp, y, x, output_init, y_init, x_init)))) && inv0(output, temp, 0, x, output, 0, x)) assume (256 > 0)