include "src/dexter/synthesis/grammar.skh";

int ARRAY_LEN = 70;
int OFFSET = 30;

struct HBuffer{
  int[ARRAY_LEN] data;
  int width;
  int height;
}

bit HBuffer_equals(HBuffer o1, HBuffer o2) {
  if (o1.data != o2.data) return false;
  if (o1.width != o2.width) return false;
  if (o1.height != o2.height) return false;
  return true;
}

int index2D(int x, int y, int width){
  return (y * width) + x;
}

HBuffer HBuffer_Set(HBuffer buf, int x, int y, int val){
  return new HBuffer(data=lift_fn0(buf, val, x, y), width=buf.width, height=buf.height);
}

int cast_uint8_uint16(int val){
  return val;
}

int cast_uint8_uint32(int val){
  return val;
}

int cast_uint8_int16(int val){
  return val;
}

int cast_uint8_int32(int val){
  return val;
}

int cast_uint16_uint32(int val){
  return val;
}

int cast_uint16_int32(int val){
  return val;
}

int cast_uint16_int64(int val){
  return val;
}

int cast_int8_int16(int val){
  return val;
}

int cast_int8_int32(int val){
  return val;
}

int cast_int16_int32(int val){
  return val;
}

int cast_int32_uint8(int val, int Const256){
  return val % Const256;
}

int cast_int32_int16(int val){
  return val;
}

int std_min(int v1, int v2){
  return (v1 > v2) ? 
    v2 : 
    v1;
}

int std_minf(int v1, int v2){
  return (v1 > v2) ? 
    v2 : 
    v1;
}

int std_max(int v1, int v2){
  return (v1 > v2) ? 
    v1 : 
    v2;
}

int std_maxf(int v1, int v2){
  return (v1 > v2) ? 
    v1 : 
    v2;
}

int std_abs(int v){
  return (v >= 0) ? 
    v : 
    (-(v));
}

int std_absf(int v){
  return (v >= (0)) ? 
    v : 
    (-(v));
}

int cast_int64_int32(int val);

int cast_uint16_float(int val);

int cast_int32_float(int val);

int cast_double_int64(int val);

int cast_double_uint8(int val);

int cast_double_int16(int val);

int cast_double_int32(int val);

int cast_int32_double(int val);

int cast_uint32_float(int val);

int cast_float_int32(int val);

int cast_uint8_float(int val);

int HBuffer_Get(HBuffer buf, int x, int y){
  return buf.data[OFFSET + ((y * (buf.width)) + x)];
}

bit inv1_inv1_buf_asn_2d(int lb_y, int ub_y, int lb_x, int ub_x, HBuffer out, HBuffer out_init, HBuffer temp_init, HBuffer input, int Const256){
  return lift_fn2(Const256, input, lb_x, lb_y, out, out_init, ub_x, ub_y);
}

bit inv0_inv0_buf_asn_2d(int lb_y, int ub_y, int lb_x, int ub_x, HBuffer out, HBuffer out_init, HBuffer temp_init, HBuffer input, int Const256){
  return lift_fn4(Const256, input, lb_x, lb_y, out, out_init, ub_x, ub_y);
}

bit pc_pc_buf_asn_2d(int lb_y, int ub_y, int lb_x, int ub_x, HBuffer out, HBuffer out_init, HBuffer temp_init, HBuffer input, int Const256){
  return lift_fn6(Const256, input, lb_x, lb_y, out, out_init, ub_x, ub_y);
}

bit idn_2d(int lb_y, int ub_y, int lb_x, int ub_x, HBuffer out, HBuffer out_init){
  return lift_fn8(lb_x, lb_y, out, out_init, ub_x, ub_y);
}

bit inv1_inv1_buf_asn_1d(int idx_y, int lb_x, int ub_x, HBuffer out, HBuffer out_init, HBuffer temp_init, HBuffer input, int Const256){
  return lift_fn9(Const256, idx_y, input, lb_x, out, out_init, ub_x);
}

bit idn_1d(int idx_y, int lb_x, int ub_x, HBuffer out, HBuffer out_init){
  return lift_fn10(idx_y, lb_x, out, out_init, ub_x);
}

int int_expr(int v1, int v2, int v3, int v4, int v5, int Const256){
  return int_expr_grm(6, {v1,v2,v3,v4,v5,cast_int32_uint8(((cast_uint8_int32(v2) + cast_uint8_int32(v3)) + cast_uint8_int32(v4)) / v5, Const256)});
}

bit pc(HBuffer input, HBuffer temp, int y, int x, HBuffer temp_init, int y_init, int x_init, int Const256){
  return true && pc_pc_buf_asn_2d(0, temp.height, 0, temp.width, temp, temp_init, temp_init, input, Const256);
}

bit inv0(HBuffer input, HBuffer temp, int y, int x, HBuffer temp_init, int y_init, int x_init, int Const256){
  return true && (inv0_inv0_buf_asn_2d(0, y, 0, temp.width, temp, temp_init, temp_init, input, Const256) && idn_2d(y, temp.height, 0, temp.width, temp, temp_init));
}

bit inv1(HBuffer input, HBuffer temp, int y, int x, HBuffer temp_init, int y_init, int x_init, int Const256){
  return true && (((inv1_inv1_buf_asn_2d(0, y, 0, temp.width, temp, temp_init, temp_init, input, Const256) && idn_2d(y + 1, temp.height, 0, temp.width, temp, temp_init)) && inv1_inv1_buf_asn_1d(y, 0, x, temp, temp_init, temp_init, input, Const256)) && idn_1d(y, x, temp.width, temp, temp_init));
}

int[ARRAY_LEN] lift_fn0(HBuffer buf, int val, int x, int y){
  int[ARRAY_LEN] r = buf.data;
  r[OFFSET + index2D(x, y, buf.width)] = val;
  return r;
}

bit lift_fn1(int Const256, int idx_y, HBuffer input, int lb_x, HBuffer out, HBuffer out_init, int ub_x){
  bit ret_val = true;
  for (int idx_x=lb_x; idx_x<ub_x; ++idx_x) {
    ret_val = ret_val && (HBuffer_Get(out, idx_x, idx_y) == int_expr(HBuffer_Get(out_init, idx_x, idx_y), HBuffer_Get(input, idx_x - 1, idx_y), HBuffer_Get(input, idx_x, idx_y), HBuffer_Get(input, idx_x + 1, idx_y), 3, Const256));
  }
  return ret_val;
}

bit lift_fn2(int Const256, HBuffer input, int lb_x, int lb_y, HBuffer out, HBuffer out_init, int ub_x, int ub_y){
  bit ret_val = true;
  for (int idx_y=lb_y; idx_y<ub_y; ++idx_y) {
    ret_val = ret_val && (lift_fn1(Const256, idx_y, input, lb_x, out, out_init, ub_x));
  }
  return ret_val;
}

bit lift_fn3(int Const256, int idx_y, HBuffer input, int lb_x, HBuffer out, HBuffer out_init, int ub_x){
  bit ret_val = true;
  for (int idx_x=lb_x; idx_x<ub_x; ++idx_x) {
    ret_val = ret_val && (HBuffer_Get(out, idx_x, idx_y) == int_expr(HBuffer_Get(out_init, idx_x, idx_y), HBuffer_Get(input, idx_x - 1, idx_y), HBuffer_Get(input, idx_x, idx_y), HBuffer_Get(input, idx_x + 1, idx_y), 3, Const256));
  }
  return ret_val;
}

bit lift_fn4(int Const256, HBuffer input, int lb_x, int lb_y, HBuffer out, HBuffer out_init, int ub_x, int ub_y){
  bit ret_val = true;
  for (int idx_y=lb_y; idx_y<ub_y; ++idx_y) {
    ret_val = ret_val && (lift_fn3(Const256, idx_y, input, lb_x, out, out_init, ub_x));
  }
  return ret_val;
}

bit lift_fn5(int Const256, int idx_y, HBuffer input, int lb_x, HBuffer out, HBuffer out_init, int ub_x){
  bit ret_val = true;
  for (int idx_x=lb_x; idx_x<ub_x; ++idx_x) {
    ret_val = ret_val && (HBuffer_Get(out, idx_x, idx_y) == int_expr(HBuffer_Get(out_init, idx_x, idx_y), HBuffer_Get(input, idx_x - 1, idx_y), HBuffer_Get(input, idx_x, idx_y), HBuffer_Get(input, idx_x + 1, idx_y), 3, Const256));
  }
  return ret_val;
}

bit lift_fn6(int Const256, HBuffer input, int lb_x, int lb_y, HBuffer out, HBuffer out_init, int ub_x, int ub_y){
  bit ret_val = true;
  for (int idx_y=lb_y; idx_y<ub_y; ++idx_y) {
    ret_val = ret_val && (lift_fn5(Const256, idx_y, input, lb_x, out, out_init, ub_x));
  }
  return ret_val;
}

bit lift_fn7(int idx_y, int lb_x, HBuffer out, HBuffer out_init, int ub_x){
  bit ret_val = true;
  for (int idx_x=lb_x; idx_x<ub_x; ++idx_x) {
    ret_val = ret_val && (HBuffer_Get(out, idx_x, idx_y) == HBuffer_Get(out_init, idx_x, idx_y));
  }
  return ret_val;
}

bit lift_fn8(int lb_x, int lb_y, HBuffer out, HBuffer out_init, int ub_x, int ub_y){
  bit ret_val = true;
  for (int idx_y=lb_y; idx_y<ub_y; ++idx_y) {
    ret_val = ret_val && (lift_fn7(idx_y, lb_x, out, out_init, ub_x));
  }
  return ret_val;
}

bit lift_fn9(int Const256, int idx_y, HBuffer input, int lb_x, HBuffer out, HBuffer out_init, int ub_x){
  bit ret_val = true;
  for (int idx_x=lb_x; idx_x<ub_x; ++idx_x) {
    ret_val = ret_val && (HBuffer_Get(out, idx_x, idx_y) == int_expr(HBuffer_Get(out_init, idx_x, idx_y), HBuffer_Get(input, idx_x - 1, idx_y), HBuffer_Get(input, idx_x, idx_y), HBuffer_Get(input, idx_x + 1, idx_y), 3, Const256));
  }
  return ret_val;
}

bit lift_fn10(int idx_y, int lb_x, HBuffer out, HBuffer out_init, int ub_x){
  bit ret_val = true;
  for (int idx_x=lb_x; idx_x<ub_x; ++idx_x) {
    ret_val = ret_val && (HBuffer_Get(out, idx_x, idx_y) == HBuffer_Get(out_init, idx_x, idx_y));
  }
  return ret_val;
}

harness void sketch(int Const256, int[ARRAY_LEN] input_data, int input_width, int input_height, int[ARRAY_LEN] temp_data, int temp_width, int temp_height, int[ARRAY_LEN] temp_init_data, int x, int x_init, int y, int y_init) {
  HBuffer input = new HBuffer();
  int[ARRAY_LEN] _t0 = input_data;
  input.data = _t0;
  int _t1 = input_width;
  input.width = _t1;
  int _t2 = input_height;
  input.height = _t2;
  HBuffer temp = new HBuffer();
  int[ARRAY_LEN] _t3 = temp_data;
  temp.data = _t3;
  int _t4 = temp_width;
  temp.width = _t4;
  int _t5 = temp_height;
  temp.height = _t5;
  HBuffer temp_init = new HBuffer();
  int[ARRAY_LEN] _t6 = temp_init_data;
  temp_init.data = _t6;
  int _t7 = temp_width;
  temp_init.width = _t7;
  int _t8 = temp_height;
  temp_init.height = _t8;
  assume (((temp.width) == (input.width)) && ((temp.height) == (input.height))) && (Const256 > 0);
  assert ((((!(inv1(input, temp, y, x, temp_init, y_init, x_init, Const256) && (x < (temp.width)))) || inv1(input, HBuffer_Set(temp, x, y, cast_int32_uint8(((cast_uint8_int32(HBuffer_Get(input, x - 1, y)) + cast_uint8_int32(HBuffer_Get(input, x, y))) + cast_uint8_int32(HBuffer_Get(input, x + 1, y))) / 3, Const256)), y, x + 1, temp_init, y_init, x_init, Const256)) && ((!(inv1(input, temp, y, x, temp_init, y_init, x_init, Const256) && (!(x < (temp.width))))) || inv0(input, temp, y + 1, x, temp_init, y_init, x_init, Const256))) && (((!(inv0(input, temp, y, x, temp_init, y_init, x_init, Const256) && (y < (temp.height)))) || inv1(input, temp, y, 0, temp_init, y_init, 0, Const256)) && ((!(inv0(input, temp, y, x, temp_init, y_init, x_init, Const256) && (!(y < (temp.height))))) || pc(input, temp, y, x, temp_init, y_init, x_init, Const256)))) && inv0(input, temp, 0, x, temp, 0, x, Const256);
}

int ashr (int v1, int v2);

int xor (int v1, int v2);

int band (int v1, int v2);

int bor (int v1, int v2);

int bnot (int v1);

int lshr (int v1, int v2) { 
  if (v2 == 0) return v1;
  if (v2 == 1) return v1 / 2;
  if (v2 == 2) return v1 / 4;
  if (v2 == 3) return v1 / 8;
  return -100;
}

int shl (int v1, int v2) { 
  if (v2 == 0) return v1;
  if (v2 == 1) return v1 * 2;
  if (v2 == 2) return v1 * 4;
  if (v2 == 3) return v1 * 8;
  return -100;
}