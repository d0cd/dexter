pc(output:HBuffer, temp:HBuffer, y:int, x:int, output_init:HBuffer, y_init:int, x_init:int) : bool -> true

inv0(output:HBuffer, temp:HBuffer, y:int, x:int, output_init:HBuffer, y_init:int, x_init:int) : bool -> true

inv1(output:HBuffer, temp:HBuffer, y:int, x:int, output_init:HBuffer, y_init:int, x_init:int) : bool -> true

let(output:HBuffer, output_init:HBuffer, temp:HBuffer, x:int, x_init:int, y:int, y_init:int) in (((((inv1(output, temp, y, x, output_init, y_init, x_init) && (x < output.width)) --> inv1(HBuffer_Set(output, x, y, cast_int32_uint8((((cast_uint8_int32(HBuffer_Get(temp, x, (y - 1))) + cast_uint8_int32(HBuffer_Get(temp, x, y))) + cast_uint8_int32(HBuffer_Get(temp, x, (y + 1)))) / 3))), temp, y, (x + 1), output_init, y_init, x_init)) && ((inv1(output, temp, y, x, output_init, y_init, x_init) && !((x < output.width))) --> inv0(output, temp, (y + 1), x, output_init, y_init, x_init))) && (((inv0(output, temp, y, x, output_init, y_init, x_init) && (y < output.height)) --> inv1(output, temp, y, 0, output_init, y_init, 0)) && ((inv0(output, temp, y, x, output_init, y_init, x_init) && !((y < output.height))) --> pc(output, temp, y, x, output_init, y_init, x_init)))) && inv0(output, temp, 0, x, output, 0, x))